{"ast":null,"code":"var _jsxFileName = \"/home/fa063951/Documents/society-management-system-fed/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { apiClient } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('authToken'));\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initAuth = async () => {\n      const storedToken = localStorage.getItem('authToken');\n      const storedUser = localStorage.getItem('user');\n      if (storedToken && storedUser) {\n        try {\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n          apiClient.setToken(storedToken);\n        } catch (error) {\n          console.error('Error parsing stored user data:', error);\n          localStorage.removeItem('authToken');\n          localStorage.removeItem('user');\n        }\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, []);\n  const login = async (usernameOrEmail, password) => {\n    try {\n      const response = await apiClient.post('/auth/signin', {\n        usernameOrEmail,\n        password\n      });\n\n      // Handle the login response format: { accessToken, type, id, username, email, firstName, lastName, phone, address, role, roles }\n      const {\n        accessToken,\n        type,\n        id,\n        username,\n        email,\n        firstName,\n        lastName,\n        phone,\n        address,\n        role,\n        roles\n      } = response;\n\n      // Create user object from the response\n      const userData = {\n        id,\n        username,\n        email,\n        firstName,\n        lastName,\n        phone,\n        address,\n        role,\n        roles\n      };\n      setToken(accessToken);\n      setUser(userData);\n      apiClient.setToken(accessToken);\n      localStorage.setItem('authToken', accessToken);\n      localStorage.setItem('user', JSON.stringify(userData));\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message || 'Login failed'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await apiClient.post('/auth/signup', userData);\n      return {\n        success: true,\n        message: response.message || 'Registration successful'\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message || 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    apiClient.clearToken();\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  };\n  const updateUser = updatedUser => {\n    setUser(updatedUser);\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser,\n    isAuthenticated: !!user && !!token\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"OpfcLSUH+QvV1lR1/bshprk98VE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiClient","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","initAuth","storedToken","storedUser","JSON","parse","error","console","removeItem","login","usernameOrEmail","password","response","post","accessToken","type","id","username","email","firstName","lastName","phone","address","role","roles","userData","setItem","stringify","success","message","register","logout","clearToken","updateUser","updatedUser","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/fa063951/Documents/society-management-system-fed/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { apiClient } from '../utils/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('authToken'));\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const storedToken = localStorage.getItem('authToken');\n      const storedUser = localStorage.getItem('user');\n      \n      if (storedToken && storedUser) {\n        try {\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n          apiClient.setToken(storedToken);\n        } catch (error) {\n          console.error('Error parsing stored user data:', error);\n          localStorage.removeItem('authToken');\n          localStorage.removeItem('user');\n        }\n      }\n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (usernameOrEmail, password) => {\n    try {\n      const response = await apiClient.post('/auth/signin', {\n        usernameOrEmail,\n        password\n      });\n\n      // Handle the login response format: { accessToken, type, id, username, email, firstName, lastName, phone, address, role, roles }\n      const { accessToken, type, id, username, email, firstName, lastName, phone, address, role, roles } = response;\n      \n      // Create user object from the response\n      const userData = {\n        id,\n        username,\n        email,\n        firstName,\n        lastName,\n        phone,\n        address,\n        role,\n        roles\n      };\n      \n      setToken(accessToken);\n      setUser(userData);\n      apiClient.setToken(accessToken);\n      \n      localStorage.setItem('authToken', accessToken);\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      return { success: true, user: userData };\n    } catch (error) {\n      console.error('Login error:', error);\n      return { \n        success: false, \n        error: error.message || 'Login failed' \n      };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const response = await apiClient.post('/auth/signup', userData);\n      return { success: true, message: response.message || 'Registration successful' };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return { \n        success: false, \n        error: error.message || 'Registration failed' \n      };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    apiClient.clearToken();\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  };\n\n  const updateUser = (updatedUser) => {\n    setUser(updatedUser);\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n  };\n\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser,\n    isAuthenticated: !!user && !!token\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}