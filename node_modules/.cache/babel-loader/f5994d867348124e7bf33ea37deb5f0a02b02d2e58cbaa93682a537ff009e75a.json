{"ast":null,"code":"import { apiClient, API_ENDPOINTS } from '../utils/api';\nexport class DashboardService {\n  // Get dashboard statistics\n  static async getDashboardStats() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.DASHBOARD_STATS);\n      return response;\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error);\n      // Fallback to mock data if backend is not available\n      return {\n        towers: 3,\n        unsoldApartments: 0,\n        apartments: 4,\n        owners: 3,\n        tenants: 1,\n        maintenanceDues: 12\n      };\n    }\n  }\n\n  // Get today's bookings\n  static async getTodaysBookings() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.TODAYS_BOOKINGS);\n      return response;\n    } catch (error) {\n      console.error('Error fetching today\\'s bookings:', error);\n      // Fallback to mock data if backend is not available\n      return [{\n        id: 1,\n        amenity: 'Swimming Pool',\n        user: 'Bernadine Keeling',\n        time: '02:00 PM',\n        duration: '40 min'\n      }, {\n        id: 2,\n        amenity: 'Swimming Pool',\n        user: 'Bernadine Keeling',\n        time: '02:40 PM',\n        duration: '40 min'\n      }, {\n        id: 3,\n        amenity: 'Gym',\n        user: 'Bernadine Keeling',\n        time: '05:00 PM',\n        duration: '20 min'\n      }];\n    }\n  }\n\n  // Get pending rent payments\n  static async getPendingPayments() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.PENDING_PAYMENTS);\n      return response;\n    } catch (error) {\n      console.error('Error fetching pending payments:', error);\n      // Fallback to mock data if backend is not available\n      return [{\n        id: 1,\n        apartment: '103 Nathaniel Hoppe',\n        year: '2025',\n        amount: '₹2,998.02',\n        status: 'Unpaid'\n      }, {\n        id: 2,\n        apartment: '103 Nathaniel Hoppe',\n        year: '2025',\n        amount: '₹2,998.02',\n        status: 'Unpaid'\n      }];\n    }\n  }\n\n  // Get open tickets\n  static async getOpenTickets() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.OPEN_TICKETS);\n      return response;\n    } catch (error) {\n      console.error('Error fetching open tickets:', error);\n      // Fallback to mock data if backend is not available\n      return [{\n        id: '11786674',\n        resident: 'Zoe Hill',\n        assigned: 'Leora Ward',\n        status: 'Open'\n      }];\n    }\n  }\n\n  // Get utility bills due\n  static async getUtilityBillsDue() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.UTILITY_BILLS_DUE);\n      return response;\n    } catch (error) {\n      console.error('Error fetching utility bills due:', error);\n      // Fallback to mock data if backend is not available\n      return [{\n        id: 1,\n        bill: '101 Water Bill',\n        date: '10 February 2025',\n        amount: '₹300.00',\n        status: 'Unpaid'\n      }];\n    }\n  }\n\n  // Get all dashboard data\n  static async getAllDashboardData() {\n    try {\n      const [stats, bookings, payments, tickets, bills] = await Promise.allSettled([this.getDashboardStats(), this.getTodaysBookings(), this.getPendingPayments(), this.getOpenTickets(), this.getUtilityBillsDue()]);\n      return {\n        stats: stats.status === 'fulfilled' ? stats.value : {},\n        bookings: bookings.status === 'fulfilled' ? bookings.value : [],\n        payments: payments.status === 'fulfilled' ? payments.value : [],\n        tickets: tickets.status === 'fulfilled' ? tickets.value : [],\n        bills: bills.status === 'fulfilled' ? bills.value : []\n      };\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      // Return empty data structure instead of throwing\n      return {\n        stats: {},\n        bookings: [],\n        payments: [],\n        tickets: [],\n        bills: []\n      };\n    }\n  }\n}\nexport default DashboardService;","map":{"version":3,"names":["apiClient","API_ENDPOINTS","DashboardService","getDashboardStats","response","get","DASHBOARD_STATS","error","console","towers","unsoldApartments","apartments","owners","tenants","maintenanceDues","getTodaysBookings","TODAYS_BOOKINGS","id","amenity","user","time","duration","getPendingPayments","PENDING_PAYMENTS","apartment","year","amount","status","getOpenTickets","OPEN_TICKETS","resident","assigned","getUtilityBillsDue","UTILITY_BILLS_DUE","bill","date","getAllDashboardData","stats","bookings","payments","tickets","bills","Promise","allSettled","value"],"sources":["/home/fa063951/Documents/society-management-system-fed/src/services/dashboardService.js"],"sourcesContent":["import { apiClient, API_ENDPOINTS } from '../utils/api';\n\nexport class DashboardService {\n  // Get dashboard statistics\n  static async getDashboardStats() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.DASHBOARD_STATS);\n      return response;\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error);\n      // Fallback to mock data if backend is not available\n      return {\n        towers: 3,\n        unsoldApartments: 0,\n        apartments: 4,\n        owners: 3,\n        tenants: 1,\n        maintenanceDues: 12\n      };\n    }\n  }\n\n  // Get today's bookings\n  static async getTodaysBookings() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.TODAYS_BOOKINGS);\n      return response;\n    } catch (error) {\n      console.error('Error fetching today\\'s bookings:', error);\n      // Fallback to mock data if backend is not available\n      return [\n        {\n          id: 1,\n          amenity: 'Swimming Pool',\n          user: 'Bernadine Keeling',\n          time: '02:00 PM',\n          duration: '40 min'\n        },\n        {\n          id: 2,\n          amenity: 'Swimming Pool',\n          user: 'Bernadine Keeling',\n          time: '02:40 PM',\n          duration: '40 min'\n        },\n        {\n          id: 3,\n          amenity: 'Gym',\n          user: 'Bernadine Keeling',\n          time: '05:00 PM',\n          duration: '20 min'\n        }\n      ];\n    }\n  }\n\n  // Get pending rent payments\n  static async getPendingPayments() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.PENDING_PAYMENTS);\n      return response;\n    } catch (error) {\n      console.error('Error fetching pending payments:', error);\n      // Fallback to mock data if backend is not available\n      return [\n        {\n          id: 1,\n          apartment: '103 Nathaniel Hoppe',\n          year: '2025',\n          amount: '₹2,998.02',\n          status: 'Unpaid'\n        },\n        {\n          id: 2,\n          apartment: '103 Nathaniel Hoppe',\n          year: '2025',\n          amount: '₹2,998.02',\n          status: 'Unpaid'\n        }\n      ];\n    }\n  }\n\n  // Get open tickets\n  static async getOpenTickets() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.OPEN_TICKETS);\n      return response;\n    } catch (error) {\n      console.error('Error fetching open tickets:', error);\n      // Fallback to mock data if backend is not available\n      return [\n        {\n          id: '11786674',\n          resident: 'Zoe Hill',\n          assigned: 'Leora Ward',\n          status: 'Open'\n        }\n      ];\n    }\n  }\n\n  // Get utility bills due\n  static async getUtilityBillsDue() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.UTILITY_BILLS_DUE);\n      return response;\n    } catch (error) {\n      console.error('Error fetching utility bills due:', error);\n      // Fallback to mock data if backend is not available\n      return [\n        {\n          id: 1,\n          bill: '101 Water Bill',\n          date: '10 February 2025',\n          amount: '₹300.00',\n          status: 'Unpaid'\n        }\n      ];\n    }\n  }\n\n  // Get all dashboard data\n  static async getAllDashboardData() {\n    try {\n      const [stats, bookings, payments, tickets, bills] = await Promise.allSettled([\n        this.getDashboardStats(),\n        this.getTodaysBookings(),\n        this.getPendingPayments(),\n        this.getOpenTickets(),\n        this.getUtilityBillsDue()\n      ]);\n\n      return {\n        stats: stats.status === 'fulfilled' ? stats.value : {},\n        bookings: bookings.status === 'fulfilled' ? bookings.value : [],\n        payments: payments.status === 'fulfilled' ? payments.value : [],\n        tickets: tickets.status === 'fulfilled' ? tickets.value : [],\n        bills: bills.status === 'fulfilled' ? bills.value : []\n      };\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      // Return empty data structure instead of throwing\n      return {\n        stats: {},\n        bookings: [],\n        payments: [],\n        tickets: [],\n        bills: []\n      };\n    }\n  }\n}\n\nexport default DashboardService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}