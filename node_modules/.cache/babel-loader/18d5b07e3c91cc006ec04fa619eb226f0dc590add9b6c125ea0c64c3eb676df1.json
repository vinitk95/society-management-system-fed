{"ast":null,"code":"// API configuration for Society Management System\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// API endpoints based on Spring Boot backend\nexport const API_ENDPOINTS = {\n  // Authentication\n  LOGIN: '/auth/signin',\n  REGISTER: '/auth/signup',\n  REFRESH: '/auth/refresh',\n  LOGOUT: '/auth/logout',\n  // Dashboard (to be implemented in backend)\n  DASHBOARD_STATS: '/dashboard/stats',\n  TODAYS_BOOKINGS: '/dashboard/bookings/today',\n  PENDING_PAYMENTS: '/dashboard/payments/pending',\n  OPEN_TICKETS: '/dashboard/tickets/open',\n  UTILITY_BILLS_DUE: '/dashboard/bills/utility/due',\n  // Users\n  USERS: '/users',\n  USER_DETAILS: id => `/users/${id}`,\n  USERS_BY_ROLE: role => `/users/role/${role}`,\n  // Apartments (to be implemented in backend)\n  APARTMENTS: '/apartments',\n  APARTMENT_DETAILS: id => `/apartments/${id}`,\n  APARTMENTS_BY_BLOCK: block => `/apartments/block/${block}`,\n  APARTMENTS_BY_STATUS: status => `/apartments/status/${status}`,\n  // Amenities (to be implemented in backend)\n  AMENITIES: '/amenities',\n  AMENITY_DETAILS: id => `/amenities/${id}`,\n  AMENITY_BOOKINGS: '/amenity-bookings',\n  BOOK_AMENITY: '/amenity-bookings',\n  AMENITY_AVAILABILITY: id => `/amenities/${id}/availability`,\n  // Billing (to be implemented in backend)\n  BILLINGS: '/billings',\n  BILLING_DETAILS: id => `/billings/${id}`,\n  BILLINGS_BY_USER: userId => `/billings/user/${userId}`,\n  BILLINGS_BY_APARTMENT: apartmentId => `/billings/apartment/${apartmentId}`,\n  BILLINGS_BY_STATUS: status => `/billings/status/${status}`,\n  // Maintenance Requests (to be implemented in backend)\n  MAINTENANCE_REQUESTS: '/maintenance-requests',\n  MAINTENANCE_DETAILS: id => `/maintenance-requests/${id}`,\n  MAINTENANCE_BY_USER: userId => `/maintenance-requests/user/${userId}`,\n  MAINTENANCE_BY_STATUS: status => `/maintenance-requests/status/${status}`,\n  // Notices (to be implemented in backend)\n  NOTICES: '/notices',\n  NOTICE_DETAILS: id => `/notices/${id}`,\n  NOTICES_BY_PRIORITY: priority => `/notices/priority/${priority}`,\n  // Visitors (to be implemented in backend)\n  VISITORS: '/visitors',\n  VISITOR_DETAILS: id => `/visitors/${id}`,\n  VISITORS_BY_USER: userId => `/visitors/user/${userId}`,\n  VISITORS_BY_STATUS: status => `/visitors/status/${status}`,\n  // Reports (to be implemented in backend)\n  REPORTS: '/reports',\n  FINANCIAL_REPORT: '/reports/financial',\n  MAINTENANCE_REPORT: '/reports/maintenance',\n  OCCUPANCY_REPORT: '/reports/occupancy'\n};\n\n// API utility functions\nexport class ApiClient {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('authToken');\n  }\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('authToken', token);\n  }\n  clearToken() {\n    this.token = null;\n    localStorage.removeItem('authToken');\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(this.token && {\n          Authorization: `Bearer ${this.token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n\n      // Handle different response statuses appropriately\n      if (response.status === 401) {\n        // Unauthorized - clear token and redirect to login\n        this.clearToken();\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n        throw new Error('Unauthorized - please login again');\n      }\n      if (response.status === 403) {\n        throw new Error('Forbidden - insufficient permissions');\n      }\n      if (response.status === 404) {\n        throw new Error('Resource not found');\n      }\n      if (response.status >= 500) {\n        throw new Error('Server error - please try again later');\n      }\n      if (!response.ok) {\n        // Try to get error message from response\n        try {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        } catch (parseError) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // HTTP methods\n  async get(endpoint, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'GET'\n    });\n  }\n  async post(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n  async put(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n  async delete(endpoint, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'DELETE'\n    });\n  }\n}\n\n// Create a default API client instance\nexport const apiClient = new ApiClient();\n\n// Example usage:\n// import { apiClient, API_ENDPOINTS } from './utils/api';\n// \n// const fetchDashboardStats = async () => {\n//   try {\n//     const stats = await apiClient.get(API_ENDPOINTS.DASHBOARD_STATS);\n//     return stats;\n//   } catch (error) {\n//     console.error('Failed to fetch dashboard stats:', error);\n//     throw error;\n//   }\n// };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","API_ENDPOINTS","LOGIN","REGISTER","REFRESH","LOGOUT","DASHBOARD_STATS","TODAYS_BOOKINGS","PENDING_PAYMENTS","OPEN_TICKETS","UTILITY_BILLS_DUE","USERS","USER_DETAILS","id","USERS_BY_ROLE","role","APARTMENTS","APARTMENT_DETAILS","APARTMENTS_BY_BLOCK","block","APARTMENTS_BY_STATUS","status","AMENITIES","AMENITY_DETAILS","AMENITY_BOOKINGS","BOOK_AMENITY","AMENITY_AVAILABILITY","BILLINGS","BILLING_DETAILS","BILLINGS_BY_USER","userId","BILLINGS_BY_APARTMENT","apartmentId","BILLINGS_BY_STATUS","MAINTENANCE_REQUESTS","MAINTENANCE_DETAILS","MAINTENANCE_BY_USER","MAINTENANCE_BY_STATUS","NOTICES","NOTICE_DETAILS","NOTICES_BY_PRIORITY","priority","VISITORS","VISITOR_DETAILS","VISITORS_BY_USER","VISITORS_BY_STATUS","REPORTS","FINANCIAL_REPORT","MAINTENANCE_REPORT","OCCUPANCY_REPORT","ApiClient","constructor","baseURL","token","localStorage","getItem","setToken","setItem","clearToken","removeItem","request","endpoint","options","url","config","headers","Authorization","response","fetch","Error","ok","errorData","json","message","parseError","error","console","get","method","post","data","body","JSON","stringify","put","delete","apiClient"],"sources":["/home/fa063951/Documents/society-management-system-fed/src/utils/api.js"],"sourcesContent":["// API configuration for Society Management System\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// API endpoints based on Spring Boot backend\nexport const API_ENDPOINTS = {\n  // Authentication\n  LOGIN: '/auth/signin',\n  REGISTER: '/auth/signup',\n  REFRESH: '/auth/refresh',\n  LOGOUT: '/auth/logout',\n\n  // Dashboard (to be implemented in backend)\n  DASHBOARD_STATS: '/dashboard/stats',\n  TODAYS_BOOKINGS: '/dashboard/bookings/today',\n  PENDING_PAYMENTS: '/dashboard/payments/pending',\n  OPEN_TICKETS: '/dashboard/tickets/open',\n  UTILITY_BILLS_DUE: '/dashboard/bills/utility/due',\n\n  // Users\n  USERS: '/users',\n  USER_DETAILS: (id) => `/users/${id}`,\n  USERS_BY_ROLE: (role) => `/users/role/${role}`,\n\n  // Apartments (to be implemented in backend)\n  APARTMENTS: '/apartments',\n  APARTMENT_DETAILS: (id) => `/apartments/${id}`,\n  APARTMENTS_BY_BLOCK: (block) => `/apartments/block/${block}`,\n  APARTMENTS_BY_STATUS: (status) => `/apartments/status/${status}`,\n\n  // Amenities (to be implemented in backend)\n  AMENITIES: '/amenities',\n  AMENITY_DETAILS: (id) => `/amenities/${id}`,\n  AMENITY_BOOKINGS: '/amenity-bookings',\n  BOOK_AMENITY: '/amenity-bookings',\n  AMENITY_AVAILABILITY: (id) => `/amenities/${id}/availability`,\n\n  // Billing (to be implemented in backend)\n  BILLINGS: '/billings',\n  BILLING_DETAILS: (id) => `/billings/${id}`,\n  BILLINGS_BY_USER: (userId) => `/billings/user/${userId}`,\n  BILLINGS_BY_APARTMENT: (apartmentId) => `/billings/apartment/${apartmentId}`,\n  BILLINGS_BY_STATUS: (status) => `/billings/status/${status}`,\n\n  // Maintenance Requests (to be implemented in backend)\n  MAINTENANCE_REQUESTS: '/maintenance-requests',\n  MAINTENANCE_DETAILS: (id) => `/maintenance-requests/${id}`,\n  MAINTENANCE_BY_USER: (userId) => `/maintenance-requests/user/${userId}`,\n  MAINTENANCE_BY_STATUS: (status) => `/maintenance-requests/status/${status}`,\n\n  // Notices (to be implemented in backend)\n  NOTICES: '/notices',\n  NOTICE_DETAILS: (id) => `/notices/${id}`,\n  NOTICES_BY_PRIORITY: (priority) => `/notices/priority/${priority}`,\n\n  // Visitors (to be implemented in backend)\n  VISITORS: '/visitors',\n  VISITOR_DETAILS: (id) => `/visitors/${id}`,\n  VISITORS_BY_USER: (userId) => `/visitors/user/${userId}`,\n  VISITORS_BY_STATUS: (status) => `/visitors/status/${status}`,\n\n  // Reports (to be implemented in backend)\n  REPORTS: '/reports',\n  FINANCIAL_REPORT: '/reports/financial',\n  MAINTENANCE_REPORT: '/reports/maintenance',\n  OCCUPANCY_REPORT: '/reports/occupancy'\n};\n\n// API utility functions\nexport class ApiClient {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('authToken');\n  }\n\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('authToken', token);\n  }\n\n  clearToken() {\n    this.token = null;\n    localStorage.removeItem('authToken');\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(this.token && { Authorization: `Bearer ${this.token}` }),\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      // Handle different response statuses appropriately\n      if (response.status === 401) {\n        // Unauthorized - clear token and redirect to login\n        this.clearToken();\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n        throw new Error('Unauthorized - please login again');\n      }\n      \n      if (response.status === 403) {\n        throw new Error('Forbidden - insufficient permissions');\n      }\n      \n      if (response.status === 404) {\n        throw new Error('Resource not found');\n      }\n      \n      if (response.status >= 500) {\n        throw new Error('Server error - please try again later');\n      }\n      \n      if (!response.ok) {\n        // Try to get error message from response\n        try {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        } catch (parseError) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // HTTP methods\n  async get(endpoint, options = {}) {\n    return this.request(endpoint, { ...options, method: 'GET' });\n  }\n\n  async post(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async put(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      ...options,\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async delete(endpoint, options = {}) {\n    return this.request(endpoint, { ...options, method: 'DELETE' });\n  }\n}\n\n// Create a default API client instance\nexport const apiClient = new ApiClient();\n\n// Example usage:\n// import { apiClient, API_ENDPOINTS } from './utils/api';\n// \n// const fetchDashboardStats = async () => {\n//   try {\n//     const stats = await apiClient.get(API_ENDPOINTS.DASHBOARD_STATS);\n//     return stats;\n//   } catch (error) {\n//     console.error('Failed to fetch dashboard stats:', error);\n//     throw error;\n//   }\n// };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}